/**
 * Google Apps Script for WhatsApp Glass Bot Integration
 *
 * This script creates a Web App that handles sync requests from your WhatsApp bot.
 * Deploy this as a Web App in Google Apps Script.
 */

// Configuration - Update these values after creating your spreadsheet
const SPREADSHEET_ID = '17oU0xbq1glbYgS6B_tBAcWMop65FzCUj32_583EEjEY'; // <<<<< YOUR SPREADSHEET ID IS HERE
const DEFAULT_SHEET_NAME = 'Pending'; // New orders from bot will land here
const SHEET_NAMES = ['Pending', 'Ready', 'Delivered', 'Completed']; // All relevant sheet names for order flow

// Column mapping (consistent across sheets)
const COLUMNS = {
  ID: 0,
  CLIENT_NAME: 1,
  SPECIFICATIONS: 2,
  SIZES: 3,
  QUANTITY: 4,
  STATUS: 5, // This is the column where the dropdown will be
  NOTES: 6,
  CREATED_AT: 7,
  UPDATED_AT: 8,
  SYNC_STATUS: 9
};
const HEADERS = [
  'ID',
  'Client Name',
  'Specifications',
  'Sizes',
  'Quantity',
  'Status',
  'Notes',
  'Created At',
  'Updated At',
  'Sync Status'
];
/**
 * Main function that handles all Web App requests
 * This is the entry point for POST requests from your WhatsApp bot/dashboard.
 */
function doPost(e) {
  try {
    if (!e || !e.postData || !e.postData.contents) {
      Logger.log('Error: No postData found in request');
      return createResponse(false, 'No data received in request');
    }

    const requestData = JSON.parse(e.postData.contents);
    const action = requestData.action || '';
    const data = requestData.data || {};
    
    const normalizedAction = action.toLowerCase();
    Logger.log('Received normalized request: ' + normalizedAction);

    switch (normalizedAction) {
      case 'test':
        return createResponse(true, 'Connection successful');
      case 'synctosheets':
        var targetSheet = data.targetSheetName || DEFAULT_SHEET_NAME;
        return syncOrdersToSheet(data.orders, targetSheet);
      case 'getorders':
        return getOrdersFromSheet(DEFAULT_SHEET_NAME);
      case 'getordersfromsheet':
        const sheetName = data.sheetName || DEFAULT_SHEET_NAME;
        return getOrdersFromSheet(sheetName);
      case 'getrawsheetdata':
        const rawSheetName = data.sheetName || DEFAULT_SHEET_NAME;
        return getRawSheetData(rawSheetName);
      case 'createspreadsheet':
        return createNewSpreadsheet(data.title);
      case 'updateorderstatusandmove':
        return handleExternalStatusUpdateAndMove(data.orderId, data.newStatus);
      default:
        return createResponse(false, 'Unknown action: ' + action);
    }
  } catch (error) {
    Logger.log('Error in doPost: ' + error.toString());
    return createResponse(false, 'Server error: ' + error.toString());
  }
}

/**
 * Handle GET requests (for testing and simple actions)
 */
function doGet(e) {
  try {
    if (e && e.parameter && e.parameter.action) {
      const action = e.parameter.action;
      const normalizedAction = action.toLowerCase();
      Logger.log('GET request with normalized action: ' + normalizedAction);

      switch (normalizedAction) {
        case 'test':
          return createResponse(true, 'Connection successful via GET');
        case 'getorders':
          return getOrdersFromSheet(DEFAULT_SHEET_NAME);
        case 'getordersfromsheet':
          const sheetName = e.parameter.sheetName || DEFAULT_SHEET_NAME;
          return getOrdersFromSheet(sheetName);
        case 'getrawsheetdata':
          const rawSheetName = e.parameter.sheetName || DEFAULT_SHEET_NAME;
          return getRawSheetData(rawSheetName);
        default:
          return createResponse(false, 'Unknown GET action: ' + action);
      }
    }
    return ContentService
      .createTextOutput('WhatsApp Glass Bot Apps Script is running!')
      .setMimeType(ContentService.MimeType.TEXT);
  } catch (error) {
    Logger.log('Error in doGet: ' + error.toString());
    return createResponse(false, 'GET error: ' + error.toString());
  }
}

/**
 * Creates a standardized JSON response for the Web App.
 */
function createResponse(success, message, data = null) {
  const response = {
    success: success,
    message: message,
    data: data,
    timestamp: new Date().toISOString()
  };
  return ContentService
    .createTextOutput(JSON.stringify(response))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * Gets the specified spreadsheet by ID and ensures all required sheets exist and are set up.
 */
function getSpreadsheet(sheetName = DEFAULT_SHEET_NAME) {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    SHEET_NAMES.forEach(name => {
      let sheet = spreadsheet.getSheetByName(name);
      if (!sheet) {
        sheet = spreadsheet.insertSheet(name);
        setupSheet(sheet);
      } else {
        setupSheet(sheet);
      }
    });
    const targetSheet = spreadsheet.getSheetByName(sheetName);
    if (!targetSheet) {
      throw new Error(`Sheet '${sheetName}' not found or could not be created.`);
    }
    return targetSheet;
  } catch (error) {
    Logger.log('Error getting spreadsheet or sheet: ' + error.toString());
    throw error;
  }
}

/**
 * Sets up a given sheet with headers, formatting, column widths, frozen rows, etc.
 */
function setupSheet(sheet) {
  if (sheet.getRange(1, 1).getValue() !== HEADERS[0]) {
    sheet.getRange(1, 1, 1, HEADERS.length).setValues([HEADERS]);
    const headerRange = sheet.getRange(1, 1, 1, HEADERS.length);
    headerRange.setBackground('#4285f4').setFontColor('white').setFontWeight('bold');
  }
  sheet.setColumnWidth(1, 100).setColumnWidth(2, 200).setColumnWidth(3, 300)
       .setColumnWidth(4, 150).setColumnWidth(5, 80).setColumnWidth(6, 100)
       .setColumnWidth(7, 200).setColumnWidth(8, 150).setColumnWidth(9, 150)
       .setColumnWidth(10, 100);
  sheet.setFrozenRows(1);
  const statusColumnIndex = COLUMNS.STATUS + 1;
  const rules = SpreadsheetApp.newDataValidation()
    .requireValueInList(['Pending', 'Ready', 'Delivered', 'Completed'])
    .setAllowInvalid(false).build();
  sheet.getRange(2, statusColumnIndex, sheet.getMaxRows() - 1).setDataValidation(rules);
}

/**
 * Syncs order line items from the bot to a specified spreadsheet tab and adds a blank row after.
 */
function syncOrdersToSheet(orders, targetSheetName) {
  try {
    const sheet = getSpreadsheet(targetSheetName);
    if (!orders || orders.length === 0) {
      return createResponse(true, 'No orders to sync');
    }
    const rowsToAppend = orders.map(order => [
      order.id || '', order.clientName || '', order.specifications || '',
      order.sizes || '', order.quantity || 0, order.status || 'Pending',
      order.notes || '', order.createdAt || '', order.updatedAt || '', 'synced'
    ]);

    // Create an empty row with the same number of columns as your headers
    const emptyRow = [Array(HEADERS.length).fill('')];

    // Combine the order rows with the empty row
    const finalRowsToWrite = rowsToAppend.concat(emptyRow);

    if (rowsToAppend.length > 0) {
      // Check if the last row is a header row or has content, to avoid double spacing
      const lastRow = sheet.getLastRow();
      let startRow = lastRow + 1;
      if (lastRow > 1 && sheet.getRange(lastRow, 1, 1, sheet.getLastColumn()).getValues()[0].every(cell => cell === '')) {
        // If the last row is already blank, start writing on that row instead of adding another space
        startRow = lastRow;
      }

      sheet.getRange(startRow, 1, finalRowsToWrite.length, HEADERS.length).setValues(finalRowsToWrite);
      // We only apply the dropdown validation to the actual order rows, not the blank one.
      applyStatusDropdownToOrderIDs(sheet, startRow, rowsToAppend.length);
    }
    return createResponse(true, `Synced ${orders.length} order line items to spreadsheet: ${targetSheetName}`);
  } catch (error) {
    return createResponse(false, `Error syncing to sheet: ${error.toString()}`);
  }
}


/**
 * Retrieves and structures order data from a specified spreadsheet tab.
 */
function getOrdersFromSheet(sheetName) {
  try {
    const sheet = getSpreadsheet(sheetName);
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return createResponse(true, `No orders found in ${sheetName}`, []);
    }

    const range = sheet.getRange(2, 1, lastRow - 1, HEADERS.length);
    const data = range.getValues().filter(row => row.some(cell => cell !== ''));

    const allOrders = [];
    let currentOrder = null;

    for (const row of data) {
      const orderId = row[COLUMNS.ID];
      const sizes = row[COLUMNS.SIZES];
      const quantity = row[COLUMNS.QUANTITY];

      if (orderId) {
        if (currentOrder) {
          allOrders.push(currentOrder);
        }
        currentOrder = {
          id: orderId,
          clientName: row[COLUMNS.CLIENT_NAME] || '',
          specifications: row[COLUMNS.SPECIFICATIONS] || '',
          items: [{ sizes: sizes || '', quantity: quantity || 0 }],
          status: row[COLUMNS.STATUS] || 'Pending',
          notes: row[COLUMNS.NOTES] || '',
          createdAt: row[COLUMNS.CREATED_AT] || '',
          updatedAt: row[COLUMNS.UPDATED_AT] || ''
        };
      } else {
        if (currentOrder) {
          currentOrder.items.push({
            sizes: sizes || '',
            quantity: quantity || 0
          });
        }
      }
    }

    if (currentOrder) {
      allOrders.push(currentOrder);
    }

    Logger.log(`Retrieved ${allOrders.length} structured orders from ${sheetName} sheet`);
    return createResponse(true, `Retrieved ${allOrders.length} orders from ${sheetName}`, allOrders);
  } catch (error) {
    Logger.log(`Error getting orders from sheet (${sheetName}): ${error.toString()}`);
    return createResponse(false, `Error getting orders: ${error.toString()}`);
  }
}

/**
 * Retrieves ALL raw data from a specified spreadsheet tab.
 */
function getRawSheetData(sheetName) {
  try {
    const sheet = getSpreadsheet(sheetName);
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return createResponse(true, `No data found in ${sheetName}`, []);
    }
    const data = sheet.getRange(1, 1, lastRow, HEADERS.length).getValues();
    return createResponse(true, `Retrieved raw data from ${sheetName}`, data);
  } catch (error) {
    return createResponse(false, `Error getting raw data: ${error.toString()}`);
  }
}

/**
 * Handles status updates and order movement when triggered by external POST requests.
 */
function handleExternalStatusUpdateAndMove(orderId, newStatus) {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    let orderRows = [];
    let sourceSheet = null;
    let startRowIndexInSourceData = -1;
    const normalizedNewStatus = newStatus.charAt(0).toUpperCase() + newStatus.slice(1).toLowerCase();

    if (!SHEET_NAMES.includes(normalizedNewStatus)) {
      return createResponse(false, `Invalid status: '${newStatus}'. Must be one of ${SHEET_NAMES.join(', ')}.`);
    }

    for (const sheetName of SHEET_NAMES) {
      const sheet = spreadsheet.getSheetByName(sheetName);
      if (!sheet || sheet.getLastRow() <= 1) continue;
      const sheetData = sheet.getRange(2, 1, sheet.getLastRow() - 1, HEADERS.length).getValues();
      for (let i = 0; i < sheetData.length; i++) {
        if (String(sheetData[i][COLUMNS.ID]).trim() === String(orderId).trim()) {
          sourceSheet = sheet;
          startRowIndexInSourceData = i;
          while (i < sheetData.length && (String(sheetData[i][COLUMNS.ID]).trim() === String(orderId).trim() || sheetData[i][COLUMNS.ID] === '')) {
            orderRows.push(sheetData[i]);
            i++;
          }
          break;
        }
      }
      if (orderRows.length > 0) break;
    }

    if (orderRows.length === 0) {
      return createResponse(false, `Order with ID ${orderId} not found in any sheet.`);
    }

    const formattedTimestamp = Utilities.formatDate(new Date(), SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone(), "yyyy-MM-dd HH:mm:ss");
    orderRows.forEach(row => {
      row[COLUMNS.STATUS] = normalizedNewStatus;
      row[COLUMNS.UPDATED_AT] = formattedTimestamp;
    });

    const targetSheet = getSpreadsheet(normalizedNewStatus);
    targetSheet.getRange(targetSheet.getLastRow() + 1, 1, orderRows.length, HEADERS.length).setValues(orderRows);
    applyStatusDropdownToOrderIDs(targetSheet, targetSheet.getLastRow() - orderRows.length + 1, 1);
    sourceSheet.deleteRows(startRowIndexInSourceData + 2, orderRows.length);

    return createResponse(true, `Order ${orderId} updated status to ${newStatus} and moved to ${targetSheet.getName()} sheet.`);
  } catch (error) {
    return createResponse(false, `Error updating status and moving order: ${error.toString()}`);
  }
}

/**
 * **Google Apps Script OnEdit Trigger Function**
 */
function onEdit(e) {
  const range = e.range;
  const sheet = range.getSheet();
  const editedColumn = range.getColumn();
  const editedRow = range.getRow();

  if (editedRow > 1 && editedColumn === (COLUMNS.ID + 1)) {
    applyStatusDropdownToOrderIDs(sheet, editedRow, 1);
  }

  if (editedRow > 1 && editedColumn === (COLUMNS.STATUS + 1)) {
    const orderId = sheet.getRange(editedRow, COLUMNS.ID + 1).getValue();
    if (orderId) {
      const newValue = e.value;
      const normalizedNewValue = newValue.charAt(0).toUpperCase() + newValue.slice(1).toLowerCase();
      if (SHEET_NAMES.includes(normalizedNewValue)) {
        moveOrderBetweenSheets(sheet, orderId, normalizedNewValue, editedRow);
      } else {
        range.setValue(e.oldValue);
        SpreadsheetApp.getUi().alert('Invalid Status', `The status '${newValue}' is not valid.`);
      }
    } else {
      range.clearDataValidations();
      if (e.value) {
        range.clearContent();
      }
    }
  }
}

/**
 * Internal helper function to find all rows associated with an order ID and move them.
 */
function moveOrderBetweenSheets(sourceSheet, orderId, newStatus, editedRow) {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const targetSheet = getSpreadsheet(newStatus);
    const sourceSheetData = sourceSheet.getDataRange().getValues();
    let orderRowsToMove = [];
    let firstOrderRowIndexInSheet = -1;

    for (let i = editedRow; i >= 2; i--) {
      if (sourceSheetData[i - 1] && String(sourceSheetData[i - 1][COLUMNS.ID]).trim() === String(orderId).trim()) {
        firstOrderRowIndexInSheet = i;
        break;
      }
    }

    if (firstOrderRowIndexInSheet === -1) return;

    const formattedTimestamp = Utilities.formatDate(new Date(), spreadsheet.getSpreadsheetTimeZone(), "yyyy-MM-dd HH:mm:ss");
    let currentRowInSheet = firstOrderRowIndexInSheet;
    while (currentRowInSheet <= sourceSheet.getLastRow()) {
      const rowData = sourceSheetData[currentRowInSheet - 1];
      if (rowData && (String(rowData[COLUMNS.ID]).trim() === String(orderId).trim() || (rowData[COLUMNS.ID] === '' && orderRowsToMove.length > 0))) {
        rowData[COLUMNS.STATUS] = newStatus;
        rowData[COLUMNS.UPDATED_AT] = formattedTimestamp;
        orderRowsToMove.push(rowData);
        currentRowInSheet++;
      } else if (rowData && rowData[COLUMNS.ID] !== '' && orderRowsToMove.length > 0) {
        break;
      } else {
        currentRowInSheet++;
      }
    }

    if (orderRowsToMove.length > 0) {
      targetSheet.getRange(targetSheet.getLastRow() + 1, 1, orderRowsToMove.length, HEADERS.length).setValues(orderRowsToMove);
      applyStatusDropdownToOrderIDs(targetSheet, targetSheet.getLastRow() - orderRowsToMove.length + 1, 1);
      sourceSheet.deleteRows(firstOrderRowIndexInSheet, orderRowsToMove.length);
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('Error moving order', `An error occurred: ${error.toString()}`);
  }
}

/**
 * Applies or removes data validation (dropdown) for the Status column.
 */
function applyStatusDropdownToOrderIDs(sheet, startRow, numRows) {
  const statusColumnIndex = COLUMNS.STATUS + 1;
  const idColumnIndex = COLUMNS.ID + 1;
  const rules = SpreadsheetApp.newDataValidation()
    .requireValueInList(['Pending', 'Ready', 'Delivered', 'Completed'])
    .setAllowInvalid(false).build();

  for (let i = 0; i < numRows; i++) {
    const currentRow = startRow + i;
    const idCell = sheet.getRange(currentRow, idColumnIndex);
    const statusCell = sheet.getRange(currentRow, statusColumnIndex);
    if (idCell.getValue()) {
      statusCell.setDataValidation(rules);
    } else {
      statusCell.clearDataValidations();
    }
  }
}

/**
 * Creates a new spreadsheet with all required tabs and initial setup.
 */
function createNewSpreadsheet(title) {
  try {
    const spreadsheet = SpreadsheetApp.create(title || 'WhatsApp Glass Bot Orders');
    SHEET_NAMES.forEach(name => {
      let sheet = spreadsheet.getSheetByName(name);
      if (!sheet) {
        sheet = spreadsheet.insertSheet(name);
        setupSheet(sheet);
      }
    });
    const defaultSheet = spreadsheet.getSheetByName('Sheet1');
    if (defaultSheet && defaultSheet.getLastRow() === 0) {
      spreadsheet.deleteSheet(defaultSheet);
    }
    return createResponse(true, 'Spreadsheet created successfully', {
      url: spreadsheet.getUrl(),
      id: spreadsheet.getId()
    });
  } catch (error) {
    return createResponse(false, `Error creating spreadsheet: ${error.toString()}`);
  }
}

// *** RESTORED UTILITY AND TEST FUNCTIONS ***

/**
 * Utility function to get spreadsheet info (e.g., URL, ID, name).
 * @returns {GoogleAppsScript.Content.TextOutput} - A JSON response with spreadsheet information.
 */
function getSpreadsheetInfo() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID); //
    const sheet = spreadsheet.getSheetByName(DEFAULT_SHEET_NAME); //
    return createResponse(true, 'Spreadsheet info retrieved', { //
      url: spreadsheet.getUrl(), //
      id: spreadsheet.getId(), //
      name: spreadsheet.getName(), //
      lastRow: sheet ? sheet.getLastRow() : 0 //
    }); //
  } catch (error) {
    Logger.log('Error getting spreadsheet info: ' + error.toString()); //
    return createResponse(false, 'Error getting spreadsheet info: ' + error.toString()); //
  }
}

/**
 * Test function - You can run this directly from the Apps Script editor
 * to verify the setup and core functionalities.
 */
function testSetup() {
  try {
    Logger.log('Starting Apps Script setup and functionality tests...'); //
    // Test spreadsheet access and ensure all required sheets exist
    SHEET_NAMES.forEach(name => getSpreadsheet(name)); //
    Logger.log('✅ All sheets accessed/created successfully.'); //

    // --- Test: Sync new order with multiple line items to 'Pending' ---
    const testOrderId = 'TEST-' + Utilities.getUuid().substring(0, 8).toUpperCase(); //
    const testOrderLineItems = [ //
      {
        id: testOrderId, //
        clientName: 'Alpha Customer', //
        specifications: '10mm Clear Glass', //
        sizes: '2000x1000', //
        quantity: 1, //
        status: 'Pending', //
        notes: 'Test main item', //
        createdAt: new Date().toISOString(), //
        updatedAt: new Date().toISOString() //
   
       }, //
      {
        id: '', //
        clientName: '', //
        specifications: '10mm Clear Glass', //
        sizes: '1500x750', //
        quantity: 2, //
        status: 'Pending', //
        notes: 'Sub-item 1', //
        createdAt: new Date().toISOString(), //
     
       updatedAt: new Date().toISOString() //
      }, //
      {
        id: '', //
        clientName: '', //
        specifications: '8mm Frosted Glass', //
        sizes: '1200x800', //
        quantity: 1, //
        status: 'Pending', //
        notes: 'Sub-item 2, different spec', //
        createdAt: new Date().toISOString(), //
     
       updatedAt: new Date().toISOString() //
      } //
    ];

    syncOrdersToSheet(testOrderLineItems, 'Pending'); //
    Logger.log('✅ Sync to Pending sheet successful with multiple line items for order ID: ' + testOrderId); //
    Utilities.sleep(1000); //
    // Give time for sheet updates

    // --- Test: Retrieve orders from 'Pending' ---
    let result = getOrdersFromSheet('Pending'); //
    Logger.log('✅ Get from Pending sheet successful. Orders retrieved: ' + (result.data ? result.data.length : 0)); //
    Utilities.sleep(1000); //
    // --- Test: Simulate movement from 'Pending' to 'Ready' (as if by external system) ---
    Logger.log(`Simulating movement of order ID: ${testOrderId} from Pending to Ready`); //
    handleExternalStatusUpdateAndMove(testOrderId, 'Ready'); //
    Logger.log('✅ Simulated movement to Ready successful.'); //
    Utilities.sleep(1000); //

    // Verify it's no longer in Pending
    result = getOrdersFromSheet('Pending'); //
    Logger.log('Pending sheet after move (should be less): ' + (result.data ? result.data.length : 0)); //
    result = getOrdersFromSheet('Ready'); //
    Logger.log('Ready sheet after move (should have new order): ' + (result.data ? result.data.length : 0)); //
    Utilities.sleep(1000); //
    // --- Test: Simulate movement from 'Ready' to 'Delivered' ---
    Logger.log(`Simulating movement of order ID: ${testOrderId} from Ready to Delivered`); //
    handleExternalStatusUpdateAndMove(testOrderId, 'Delivered'); //
    Logger.log('✅ Simulated movement to Delivered successful.'); //
    Utilities.sleep(1000); //

    // --- Test: Simulate movement from 'Delivered' to 'Completed' ---
    Logger.log(`Simulating movement of order ID: ${testOrderId} from Delivered to Completed`); //
    handleExternalStatusUpdateAndMove(testOrderId, 'Completed'); //
    Logger.log('✅ Simulated movement to Completed successful.'); //
    Utilities.sleep(1000); //

    // Verify it's in Completed
    result = getOrdersFromSheet('Completed'); //
    Logger.log('Completed sheet after final move (should have new order): ' + (result.data ? result.data.length : 0)); //
    Utilities.sleep(1000); //
    Logger.log('🎉 All main tests passed! Apps Script is ready.'); //

  } catch (error) {
    Logger.log('❌ Test failed: ' + error.toString()); //
    SpreadsheetApp.getUi().alert('Test Failed', 'One or more tests failed. Check the Apps Script logs for details: ' + error.toString(), SpreadsheetApp.getUi().ButtonSet.OK); //
  }
}

/**
 * **Utility Function to Initialize/Update All Sheets**
 * Run this function once from the Apps Script editor after deploying the code.
 * It ensures that all tabs ('Pending', 'Ready', 'Delivered', 'Completed') exist
 * in your Google Sheet, have the correct headers, formatting, frozen rows,
 * and the 'Status' dropdown with 'Completed' option.
 */
function initializeSheets() {
  try {
    SHEET_NAMES.forEach(sheetName => { //
      const sheet = getSpreadsheet(sheetName); // This will ensure sheet exists and is set up
      Logger.log(`Initialized/Updated sheet: ${sheetName}`); //
    }); //
    Logger.log('All required sheets initialized/updated with headers, formatting, and validation.'); //
    SpreadsheetApp.getUi().alert('Initialization Complete', 'All required sheets have been initialized/updated successfully. Please ensure you have set up the "On edit" trigger if you plan to move orders by changing status in the sheet.', SpreadsheetApp.getUi().ButtonSet.OK); //
  } catch (error) {
    Logger.log('Error initializing sheets: ' + error.toString()); //
    SpreadsheetApp.getUi().alert('Initialization Error', 'An error occurred during initialization: ' + error.toString() + '. Check Apps Script logs for details.', SpreadsheetApp.getUi().ButtonSet.OK); //
  }
}